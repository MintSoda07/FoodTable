package com.bcu.foodtable.JetpackCompose.AI

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.bcu.foodtable.AI.OpenAIClient
import com.bcu.foodtable.useful.ApiKeyManager
import com.bcu.foodtable.useful.FirebaseHelper.updateFieldById
import com.bcu.foodtable.useful.UserManager
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

class AiHelperViewModel(
    private val apiClient: OpenAIClient
) : ViewModel() {

    private val _uiState = MutableStateFlow(AiUiState())
    val uiState: StateFlow<AiUiState> = _uiState

    private val user = UserManager.getUser()
    private val aiUseCost = 40

    init {
        user?.let {
            _uiState.update { state -> state.copy(userPoint = it.point) }
        }

        val apiKey = ApiKeyManager.getGptApi()
        if (apiKey == null) {
            apiClient.setAIWithAPI(
                onSuccess = {
                    ApiKeyManager.setGptApiKey(it.KEY_NAME!!, it.KEY_VALUE!!)
                    Log.i("AiHelper", "GPT API Key Loaded")
                },
                onError = {
                    Log.e("AiHelper", "GPT API Key Load Failed")
                }
            )
        } else {
            apiClient.apiKeyInfo = apiKey
        }
    }

    fun onInputChange(newInput: String) {
        _uiState.update { it.copy(inputText = newInput) }
    }

    fun hideWarning() {
        _uiState.update { it.copy(showWarning = false) }
    }

    fun sendMessage() {
        val state = _uiState.value
        val input = state.inputText
        val point = state.userPoint

        if (input.isBlank() || point < aiUseCost || state.isSending) return

        Log.d("AiHelper", "üîÑ AI Ìò∏Ï∂ú ÏãúÏûë: ÏûÖÎ†• = $input, Ìè¨Ïù∏Ìä∏ = $point")

        _uiState.update { it.copy(isSending = true, showWarning = false) }

        val rule = """
        ÎãπÏã†ÏùÄ Ï°∞Î¶¨Î•º ÎèÑÏôÄÏ£ºÎäî Ïø°Î¥áÏûÖÎãàÎã§. ÏßÄÏºúÏïº Ìï† Í∑úÏπôÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§.
        1. ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìïú Ïû¨Î£åÎßå ÏÇ¨Ïö©ÌïòÏó¨ ÎßåÎì§ Ïàò ÏûàÎäî Î†àÏãúÌîºÎ•º ÏµúÏÜå 4Í∞ú Ïù¥ÏÉÅ Ï†úÍ≥µÌï©ÎãàÎã§.
        2. Ïû¨Î£å Î™©Î°ùÏùÄ Îî∞Î°ú Î†àÏãúÌîº Ï†úÍ≥µ Ï†Ñ {}ÏïàÏóê ÏûëÏÑ±Ìï©ÎãàÎã§. Ïòà: {ÏÜåÍ≥†Í∏∞}{Í∞êÏûê}{ÏÜåÍ∏à}{ÌõÑÏ∂î} 
        3. Ï†úÍ≥µÎêòÎäî Î†àÏãúÌîºÏùò ÏïûÍ≥º Îí§ÏóêÎäî Ï†ïÍ∑úÏãù Íµ¨Î∂ÑÏùÑ ÏúÑÌï¥ ‚óÜÏùÑ Î∂ôÏó¨ Ï£ºÏÑ∏Ïöî. Ïòà: ‚óÜÍ∞êÏûê ÏÜåÍ∏àÍµ¨Ïù¥‚óÜ
        4. ÎòêÌïú, Î†àÏãúÌîºÏóê ÏÇ¨Ïö©ÎêòÎäî Ïû¨Î£åÎ•º ÏûêÏÑ∏Ìïú Ïö©ÎüâÍ≥º Ìï®Íªò Î†àÏãúÌîº Ïù¥Î¶Ñ Îí§Ïóê Í¥ÑÌò∏Î°ú ÎÑ£Ïñ¥ Ï£ºÏÑ∏Ïöî. Ïòà: ‚óÜÍ∞êÏûê ÏÜåÍ∏àÍµ¨Ïù¥‚óÜ(Í∞êÏûê 2Í∞ú,ÏÜåÍ∏à 5g)
        """.trimIndent()

        apiClient.sendMessage(
            prompt = "ÏÇ¨Ïö©Ïûê ÏûÖÎ†•:$input",
            role = rule,
            onSuccess = { response ->
                Log.d("AiHelper", "‚úÖ GPT ÏùëÎãµ ÏàòÏã† ÏôÑÎ£å:\n$response")

                viewModelScope.launch {
                    val ingredientRegex = """\{(.*?)\}""".toRegex()
                    val ingredients = ingredientRegex.findAll(response).map { it.groupValues[1] }.toList()
                    Log.d("AiHelper", "üü¢ Ï∂îÏ∂úÎêú Ïû¨Î£å: $ingredients")

                    val recipeRegex = """‚óÜ(.*?)‚óÜ""".toRegex()
                    val recipes = recipeRegex.findAll(response).map { it.groupValues[1] }.toList()
                    Log.d("AiHelper", "üü¢ Ï∂îÏ∂úÎêú Î†àÏãúÌîº Ï†úÎ™©: $recipes")

                    val recipeDetailsRegex = """‚óÜ.*?‚óÜ\((.*?)\)""".toRegex()
                    val details = recipeDetailsRegex.findAll(response).map { it.groupValues[1] }.toList()
                    Log.d("AiHelper", "üü¢ Ï∂îÏ∂úÎêú Î†àÏãúÌîº ÏÉÅÏÑ∏: $details")

                    val newPoint = point - aiUseCost
                    user?.point = newPoint
                    updateFieldById("user", user?.uid ?: "", "point", newPoint)

                    _uiState.update {
                        it.copy(
                            userPoint = newPoint,
                            inputText = "",
                            ingredients = ingredients,
                            recipes = recipes,
                            recipeDetails = details,
                            resultText = recipes.joinToString("\n"),
                            reasonText = details.joinToString("\n"),
                            isSending = false
                        )
                    }

                    Log.d("AiHelper", "‚úÖ UI ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
                }
            },
            onError = { error ->
                Log.e("AiHelper", "‚ùå GPT API Ïò§Î•ò: $error")
                _uiState.update { it.copy(isSending = false) }
            }
        )
    }
}
